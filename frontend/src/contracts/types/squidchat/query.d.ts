// Generated by dedot cli

import type { GenericSubstrateApi } from "dedot/types";
import type { AccountId32Like, Result, AccountId32 } from "dedot/codecs";
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from "dedot/contracts";
import type {
  SquidchatPendingRequestRecord,
  InkPrimitivesLangError,
  SquidchatErrorsSquidChatError,
  SquidchatChannelRecord,
  SquidchatChannel,
  SquidchatPagination,
  SquidchatPagination002,
  SquidchatPagination003,
  SquidchatApprovalSubmissionResult,
  SquidchatPagination004,
} from "./types";

export interface ContractQuery<ChainApi extends GenericSubstrateApi>
  extends GenericContractQuery<ChainApi> {
  /**
   *
   * @param {AccountId32Like | undefined} who
   * @param {Array<number>} channelIds
   * @param {ContractCallOptions} options
   *
   * @selector 0xbeabaa89
   **/
  pendingRequestFor: GenericContractQueryCall<
    ChainApi,
    (
      who: AccountId32Like | undefined,
      channelIds: Array<number>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<SquidchatPendingRequestRecord>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0xccbb806f
   **/
  pendingRequestsCount: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0x850ee7dc
   **/
  messageCount: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0xabea8588
   **/
  getChannelMembers: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Array<AccountId32>, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} who
   * @param {ContractCallOptions} options
   *
   * @selector 0x3ccb7cfd
   **/
  getMemberChannels: GenericContractQueryCall<
    ChainApi,
    (
      who: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<SquidchatChannelRecord>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0xbac190b6
   **/
  getChannelInfo: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<SquidchatChannel, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} from
   * @param {number} perPage
   * @param {ContractCallOptions} options
   *
   * @selector 0x591d2907
   **/
  listChannels: GenericContractQueryCall<
    ChainApi,
    (
      from: number,
      perPage: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        SquidchatPagination,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {string | undefined} imgUrl
   * @param {ContractCallOptions} options
   *
   * @selector 0x5c7ff4a1
   **/
  newChannel: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      imgUrl: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {string} name
   * @param {string | undefined} imgUrl
   * @param {ContractCallOptions} options
   *
   * @selector 0x4c28f0a6
   **/
  updateChannel: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      name: string,
      imgUrl: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {number} from
   * @param {number} perPage
   * @param {ContractCallOptions} options
   *
   * @selector 0xe9208009
   **/
  listMembers: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      from: number,
      perPage: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        SquidchatPagination002,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {number} from
   * @param {number} perPage
   * @param {ContractCallOptions} options
   *
   * @selector 0xeda51d58
   **/
  listPendingRequests: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      from: number,
      perPage: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        SquidchatPagination003,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0xdab6d4bd
   **/
  cancelRequest: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0x67f71055
   **/
  sendRequest: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {Array<[AccountId32Like, boolean]>} approvals
   * @param {ContractCallOptions} options
   *
   * @selector 0x463a3d58
   **/
  approveRequest: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      approvals: Array<[AccountId32Like, boolean]>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          SquidchatApprovalSubmissionResult,
          SquidchatErrorsSquidChatError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0x5f3dc9ba
   **/
  leaveChannel: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} who
   * @param {number} channelId
   * @param {ContractCallOptions} options
   *
   * @selector 0xa95d714b
   **/
  kickMember: GenericContractQueryCall<
    ChainApi,
    (
      who: AccountId32Like,
      channelId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {number} from
   * @param {number} perPage
   * @param {ContractCallOptions} options
   *
   * @selector 0x24f7deae
   **/
  listMessages: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      from: number,
      perPage: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        SquidchatPagination004,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {string} content
   * @param {ContractCallOptions} options
   *
   * @selector 0xafdc403f
   **/
  sendMessage: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      content: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {number} channelId
   * @param {number} messageId
   * @param {ContractCallOptions} options
   *
   * @selector 0xc78e4564
   **/
  removeMessage: GenericContractQueryCall<
    ChainApi,
    (
      channelId: number,
      messageId: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], SquidchatErrorsSquidChatError>,
        ContractCallResult<ChainApi>
      >
    >
  >;
}
